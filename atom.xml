<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luobuyu&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.luobuyu.site/"/>
  <updated>2024-10-30T14:47:37.464Z</updated>
  <id>https://www.luobuyu.site/</id>
  
  <author>
    <name>luobuyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>3177. 求出最长好子序列 II</title>
    <link href="https://www.luobuyu.site/2024/find-maximum-length-subsequence-ii/"/>
    <id>https://www.luobuyu.site/2024/find-maximum-length-subsequence-ii/</id>
    <published>2024-09-13T09:45:53.000Z</published>
    <updated>2024-10-30T14:47:37.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="3177-求出最长好子序列II"><a href="#3177-求出最长好子序列II" class="headerlink" title="3177.求出最长好子序列II"></a><a href="https://leetcode.cn/problems/find-the-maximum-length-of-a-good-subsequence-ii/" target="_blank" rel="noopener">3177.求出最长好子序列II</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个整数数组 <code>nums</code> 和一个 <strong>非负</strong> 整数 <code>k</code> 。如果一个整数序列 <code>seq</code> 满足在范围下标范围 <code>[0, seq.length - 2]</code> 中存在 <strong>不超过</strong> <code>k</code> 个下标 <code>i</code> 满足 <code>seq[i] != seq[i + 1]</code> ，那么我们称这个整数序列为 <strong>好</strong> 序列。</p><p>请你返回 <code>nums</code> 中 <strong>好</strong> 子序列 的最长长度</p><p>数据范围：</p><p> $1\le nums.len \le 5 \times 10^3, 1\le nums[i] \le 10^9, 0\le k \le \min(50, nums.len)$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>子序列，不是子数组。子数组的话可以直接滑动窗口，子序列只能dp了。</p><p>考虑 $dp[i][k]$ 表示以 $nums[i]$ 结尾，且不相等的个数为 $k$ 的最大长度。</p><p>则可以得到</p><script type="math/tex; mode=display">dp[i][k] = \begin{cases}dp[j][k] + 1, nums[i] = nums[j]\\dp[j][k - 1] + 1, nums[i] \neq nums[j]\end{cases}\\j \in [0, i)</script><p>但是复杂度为 $O(n^2\times k)$ ，会超时。</p><p>考虑求前缀最大值优化。优化掉 $j$ 这层循环。</p><p> $dp[i][k]$ 需要使用 $dp[j][k - 1], dp[j][k]$ 也就是前一列的最大值，和当前列的最大值。 $k$ 从前往后，需要每一列的最大值。可以用一个长度为 $k + 1$ 的数组维护每一列的最大值。然后当遍历完一行之后，更新一下每列的最大值。</p><p>需要注意的是， $dp[j][k]$ 怎么优化掉？</p><p>因为 $dp[j][k]$ 只会在 $nums[j] = nums[i]$ 时出现，而且相等时肯定选最新的。因此可以使用一个 <code>unordered_map</code> ，直接把上一行拷贝过来。</p><p>然后再遍历所有的不相等的情况。 </p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k + <span class="number">1</span>))</span></span>;</span><br><span class="line">        <span class="comment">// dp[i][k] 表示 以 nums[i] 结尾的，刚好为 k 个的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> kk = <span class="number">0</span>; kk &lt;= min(k, i + <span class="number">1</span>); ++kk)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] == nums[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[i][kk] = max(dp[i][kk], dp[j][kk] + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 前一列的最大值，i 往后移动，需要维护每一列的最大值</span></span><br><span class="line">                        <span class="keyword">if</span> (kk - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                            dp[i][kk] = max(dp[i][kk], dp[j][kk - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ans = max(ans, dp[i][kk]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      dp优化，需要快速查询前缀最值，可以递推维护。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/dp/"/>
    
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
      <category term="dp优化" scheme="https://www.luobuyu.site/tags/dp%E4%BC%98%E5%8C%96/"/>
    
      <category term="最值优化" scheme="https://www.luobuyu.site/tags/%E6%9C%80%E5%80%BC%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>1035. 不相交的线</title>
    <link href="https://www.luobuyu.site/2024/uncrossed-lines/"/>
    <id>https://www.luobuyu.site/2024/uncrossed-lines/</id>
    <published>2024-08-11T14:32:54.000Z</published>
    <updated>2024-10-30T14:47:37.448Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1035-不相交的线"><a href="#1035-不相交的线" class="headerlink" title="1035. 不相交的线"></a><a href="https://leetcode.cn/problems/uncrossed-lines/description/" target="_blank" rel="noopener">1035. 不相交的线</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>在两条独立的水平线上按给定的顺序写下 <code>nums1</code> 和 <code>nums2</code> 中的整数。</p><p>现在，可以绘制一些连接两个数字 <code>nums1[i]</code> 和 <code>nums2[j]</code> 的直线，这些直线需要同时满足：</p><ul><li><code>nums1[i] == nums2[j]</code></li><li>且绘制的直线不与任何其他连线（非水平线）相交。</li></ul><p>请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。</p><p>以这种方法绘制线条，并返回可以绘制的最大连线数。</p><p>数据范围：</p><p> $1\le nums1.len, nums2.len \le 500, 1\le nums1[i],nums2[i]\le 2000$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>不相交，而且是相等的元素，可以发现就是最长公共子序列。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxUncrossedLines</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums1.size();</span><br><span class="line">        <span class="keyword">int</span> m = nums2.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      发现是最长公共子序列。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/dp/"/>
    
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
      <category term="LCS" scheme="https://www.luobuyu.site/tags/LCS/"/>
    
  </entry>
  
  <entry>
    <title>3209. 子数组按位与值为 K 的数目</title>
    <link href="https://www.luobuyu.site/2024/number-of-subarrays-with-and-value-of-k/"/>
    <id>https://www.luobuyu.site/2024/number-of-subarrays-with-and-value-of-k/</id>
    <published>2024-07-29T16:03:01.000Z</published>
    <updated>2024-10-30T14:47:37.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="3209-子数组按位与值为-K-的数目"><a href="#3209-子数组按位与值为-K-的数目" class="headerlink" title="3209.子数组按位与值为 K 的数目"></a><a href="https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/" target="_blank" rel="noopener">3209.子数组按位与值为 K 的数目</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回 <code>nums</code> 中有多少个子数组满足：子数组中所有元素按位 <code>AND</code> 的结果为 <code>k</code> 。</p><p>数据范围：</p><p> $1\le nums.len \le 10^5, 0 \le nums[i],k \le 10^9$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>按照 logtrick 可以快速处理出所有以 $nums[i]$ 为终点的区间位运算和。而且此时 $nums[i]$ 左侧的全是他的子集。因此可以直接找出所有与 $k$ 相等的，这里可以用二分，因为最后得到的数组是升序的。</p><p>也可以找出与 $k$ 最接近的，这时就需要使用二分找到 $\ge k$ 的位置，然后使用他和他前面的数字更新最优解。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">countSubarrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// a1 &amp; a2 &amp; a3, a2 &amp; a3, a3, a4</span></span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//  vector&lt;int&gt; a = &#123;1, 9, 9, 7, 4&#125;;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == k) ans++;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[j] &amp; nums[i]) == nums[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                nums[j] &amp;= nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// nums[j] 是 nums[i] 的子集。nums[k], k \in [0, j] 是 nums[i] 的子集</span></span><br><span class="line">            <span class="keyword">int</span> cnt = upper_bound(nums.begin(), nums.begin() + i, k) - lower_bound(nums.begin(), nums.begin() + i, k);</span><br><span class="line">            ans += cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>找出最接近的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDifference</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[j] | nums[i]) == nums[j])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                nums[j] |= nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找到大于等于 k 的。</span></span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = i;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &gt;= k) &#123;</span><br><span class="line">                    index = mid;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index == <span class="number">-1</span>) &#123;</span><br><span class="line">                ans = min(ans, <span class="built_in">abs</span>(nums[<span class="number">0</span>] - k));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = min(ans, <span class="built_in">abs</span>(nums[index] - k));</span><br><span class="line">                <span class="keyword">if</span>(index + <span class="number">1</span> &lt;= i) &#123;</span><br><span class="line">                    ans = min(ans, <span class="built_in">abs</span>(nums[index + <span class="number">1</span>] - k));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      logtrick经典题目。先处理出单调序列，然后再二分。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="ds" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/ds/"/>
    
    
      <category term="二分" scheme="https://www.luobuyu.site/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="logtrick" scheme="https://www.luobuyu.site/tags/logtrick/"/>
    
  </entry>
  
  <entry>
    <title>2411. 按位或最大的最小子数组长度</title>
    <link href="https://www.luobuyu.site/2024/smallest-subarrays-max-or/"/>
    <id>https://www.luobuyu.site/2024/smallest-subarrays-max-or/</id>
    <published>2024-07-25T16:27:12.000Z</published>
    <updated>2024-10-30T14:47:37.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="2411-按位或最大的最小子数组长度（logtrick）"><a href="#2411-按位或最大的最小子数组长度（logtrick）" class="headerlink" title="2411.按位或最大的最小子数组长度（logtrick）"></a><a href="https://leetcode.cn/problems/smallest-subarrays-with-maximum-bitwise-or/description/" target="_blank" rel="noopener">2411.按位或最大的最小子数组长度（logtrick）</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个长度为 <code>n</code> 下标从 <strong>0</strong> 开始的数组 <code>nums</code> ，数组中所有数字均为非负整数。对于 <code>0</code> 到 <code>n - 1</code> 之间的每一个下标 <code>i</code> ，你需要找出 <code>nums</code> 中一个 <strong>最小</strong> 非空子数组，它的起始位置为 <code>i</code> （包含这个位置），同时有 <strong>最大</strong> 的 <strong>按位或**</strong>运算值** 。</p><ul><li>换言之，令 <code>Bij</code> 表示子数组 <code>nums[i...j]</code> 的按位或运算的结果，你需要找到一个起始位置为 <code>i</code> 的最小子数组，这个子数组的按位或运算的结果等于 <code>max(Bik)</code> ，其中 <code>i &lt;= k &lt;= n - 1</code> 。</li></ul><p>一个数组的按位或运算值是这个数组里所有数字按位或运算的结果。</p><p>请你返回一个大小为 <code>n</code> 的整数数组 <code>answer</code>，其中 <code>answer[i]</code>是开始位置为 <code>i</code> ，按位或运算结果最大，且 <strong>最短</strong> 子数组的长度。</p><p><strong>子数组</strong> 是数组里一段连续非空元素组成的序列。</p><p>数据范围：</p><p> $1\le n \le 10^5, 0\le nums[i] \le 10^9$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>使用 logtrick 模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j] | nums[i] == nums[j]) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 统计</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要用一个 <code>maxx[i]</code> 数组表示从 $i$ 到末尾子数组或值最大的结果。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">smallestSubarrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxx</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            maxx[i] = nums[i];</span><br><span class="line">            ans[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[j] | nums[i]) == nums[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                nums[j] |= nums[i];</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; maxx[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    maxx[j] = nums[j];</span><br><span class="line">                    ans[j] = i - j + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[j] == maxx[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i - j + <span class="number">1</span> &lt; ans[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        ans[j] = i - j + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      logtrick 方法。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="ds" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/ds/"/>
    
    
      <category term="logtrick" scheme="https://www.luobuyu.site/tags/logtrick/"/>
    
      <category term="位运算" scheme="https://www.luobuyu.site/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>3098. 求出所有子序列的能量和</title>
    <link href="https://www.luobuyu.site/2024/find-the-sum-of-subsequence-powers/"/>
    <id>https://www.luobuyu.site/2024/find-the-sum-of-subsequence-powers/</id>
    <published>2024-07-23T15:15:09.000Z</published>
    <updated>2024-10-30T14:47:37.460Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="3098-求出所有子序列的能量和"><a href="#3098-求出所有子序列的能量和" class="headerlink" title="3098.求出所有子序列的能量和"></a><a href="https://leetcode.cn/problems/find-the-sum-of-subsequence-powers/" target="_blank" rel="noopener">3098.求出所有子序列的能量和</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> 和一个 <strong>正</strong> 整数 <code>k</code> 。一个子序列的 <strong>能量</strong> 定义为子序列中 <strong>任意</strong> 两个元素的差值绝对值的 <strong>最小值</strong> 。</p><p>请你返回 <code>nums</code> 中长度 <strong>等于</strong> <code>k</code> 的 <strong>所有</strong> 子序列的 <strong>能量和</strong> 。</p><p>由于答案可能会很大，将答案对 $10^9 + 7$ <strong>取余</strong> 后返回。</p><p>数据范围：</p><p> $2\le n \le 50, 2\le k \le n$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>子序列，可以直接排序，然后就只需要考虑相邻两个元素的差值即可。</p><p>设计动态规划， $dp[i][k]$ 肯定需要，表示 $[0, i]$ 中以 $i$ 结尾的长度为 $k$ 的子序列的能量和。</p><p>另一个状态就不好想了。另一个状态为当前序列的能量值， $dp[i][k][v]$ 表示以 $i$ 结尾的长度为 $k$ ，并且能量值为 $v$ 的个数，那么答案就是 $dp[i][k][v] \times v$ 。</p><p>枚举子序列中的前一个数字 $j$ ，则 $dp[i][k][\min(v, diff)] = dp[i][k][\min(v, diff)] + dp[j][k - 1][v]$ </p><p>枚举子序列中的前一个数字 $j$ ，并且遍历所有的 $v$ ，然后更新 $i$ 。</p><p>需要四层循环， $O(n^4)$ 。</p><p>但是需要注意怎么存 $v$ ，以及初始条件。有点类似上一道题目，都是需要存起来所有的值。</p><p>这里可以直接使用 $map$ 。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumOfPowers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 长度等于 k 的字序列的能量和</span></span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="comment">// dp[i][k][val] * val</span></span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        vector&lt;vector&lt;unordered_map&lt;int, int&gt;&gt;&gt; dp(n, vector&lt;unordered_map&lt;int, int&gt;&gt;(k + 1)); // dp[i][j][k] -&gt; map[k] -&gt; v</span><br><span class="line">        <span class="comment">// dp[i][k][v] += dp[j][k - 1][v]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>][INF] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> kk = <span class="number">1</span>; kk &lt;= k; ++kk) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [v, value]: dp[j][kk - <span class="number">1</span>]) &#123;</span><br><span class="line">                        dp[i][kk][min(v, nums[i] - nums[j])] = (dp[i][kk][min(v, nums[i] - nums[j])] + value) % mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [v, value]: dp[i][k]) &#123;</span><br><span class="line">                ans = (ans + <span class="number">1l</span>l * dp[i][k][v] * v % mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      类似上一题，需要存起来所有的值。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/dp/"/>
    
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
      <category term="排序" scheme="https://www.luobuyu.site/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="枚举" scheme="https://www.luobuyu.site/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>3097. 或值至少为 K 的最短子数组 II</title>
    <link href="https://www.luobuyu.site/2024/shortest-subarray-with-or-at-least-k-ii/"/>
    <id>https://www.luobuyu.site/2024/shortest-subarray-with-or-at-least-k-ii/</id>
    <published>2024-07-20T13:48:23.000Z</published>
    <updated>2024-10-30T14:47:37.460Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="3097-或值至少为-K-的最短子数组"><a href="#3097-或值至少为-K-的最短子数组" class="headerlink" title="3097.或值至少为 K 的最短子数组"></a><a href="https://leetcode.cn/problems/shortest-subarray-with-or-at-least-k-ii/description/" target="_blank" rel="noopener">3097.或值至少为 K 的最短子数组</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个 <strong>非负</strong> 整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>如果一个数组中所有元素的按位或运算 <code>OR</code> 的值 <strong>至少</strong> 为 <code>k</code> ，那么我们称这个数组是 <strong>特别的</strong> 。</p><p>请你返回 <code>nums</code> 中 <strong>最短特别非空</strong> 子数组的长度，如果特别子数组不存在，那么返回 <code>-1</code> 。</p><p>数据范围：</p><p> $1\le n \le 2\times 10^5, 1\le nums[i] \le 10^9, 0 \le k \le 10^9$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>滑动窗口：</strong></p><p>由于存在单调性，<code>or</code> 运算只能越来越大。因此可以使用滑动窗口来做。</p><p>需要使用一个长度为 $32$ 的数组，维护当前窗口每一位上 $1$ 的个数。每次加入 $nums[r]$ ，更新当前窗口里面 $1$ 的个数，移除左端点 $nums[l]$ 时也要更新。  </p><p><strong>子数组 OR/AND/GCD 通用模板：</strong></p><p>由于是 <code>or</code> 运算，只能越来越大，而且最多只会出现 $\log(nums[i])$ 种不同的值。因此可以直接维护当前以 $i$ 为终点的子数组中，<code>or</code> 值的种类。使用一个<code>vector&lt;pair&lt;int, int&gt;&gt; orsum</code> 表示。其中元素对 <code>(key,val)</code> 表示当前 <code>orsum</code> 为 <code>key</code> 时，最大的 <code>left</code> 为 <code>val</code>。这样的话 <code>i - val + 1</code> 就可以得到子数组 <code>orsum &gt;= k</code> 时的长度了。假设已经得到了 $nums[i - 1]$ 的 <code>orsum</code> 数组，那么加入 $nums[i]$ 时，需要考虑将 $nums[i]$ 与里面的所有元素 <code>or</code> 一遍，同时需要注意去重。单调性是递减的，因为越往后，或的越少，数值只能更小。</p><p>例如 <code>a1, a2, a3</code></p><p><code>(a1, 0)</code></p><p><code>(a1 | a2, 0), (a2, 1)</code></p><p><code>(a1 | a2 | a3, 0), (a2 | a3, 1), (a3, 2)</code>。</p><p><strong><code>key</code> 是递减的，<code>val</code> 是递增的。</strong></p><p>其实也可以先运算一遍之后，直接调用去重的 <code>unique</code> 函数。</p><p><strong>为了便利计算，可以先放入 <code>(0, i)</code>，为了最后 <code>or</code> 的时候得到 <code>(ai, i)</code>。</strong></p><p>原地去重：</p><p>考虑一个递减数组，原地去重操作。</p><p>假设当前数组末尾是 <code>nums[k]</code>，每次将需要加入的 <code>nums[i]</code> 与 <code>nums[k]</code> 对比，如果不相同，则放到 <code>nums[k + 1]</code> 处；相同的话则继续往后遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] != nums[k]) &#123;</span><br><span class="line">        nums[++k] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">nums.resize(k + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>模板：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j] ? nums[i] == nums[j]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计，求最优值等。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中会得到这样的序列</p><p><code>a1?a2?a3?a4, a2?a3?a4, a3?a4, a4</code>。</p><p>由于 <code>lcm, gcd, |, &amp;</code> 具有单调性。当 <code>nums[j] | nums[i] = nums[j]</code> 时，表明，<code>nums[i]</code> 是 <code>nums[j]</code> 的子集，又因为 <code>nums[j]</code> 是左侧所有元素的子集，因此 <code>nums[i]</code> 是 <code>nums[k], 0&lt;k&lt;=j</code> 的子集，因此继续往前都不会有什么变化了。</p><p>同理<code>gcd, lcm, &amp;</code> 也可以得到类似的结论。</p><p>而且由于单调性，所得到的序列可以进行二分。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getOrSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">diffVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] -= b[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] += b[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumSubarrayLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">cur</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">32</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[i] &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cur[i][j]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> orsum = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">tmp</span><span class="params">(<span class="number">32</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r)</span><br><span class="line">        &#123;</span><br><span class="line">            addVector(tmp, cur[r]);</span><br><span class="line">            orsum = getOrSum(tmp);</span><br><span class="line">            <span class="keyword">while</span> (orsum &gt;= k &amp;&amp; l &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (orsum &gt;= k)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = min(ans, r - l + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                diffVector(tmp, cur[l]);</span><br><span class="line">                orsum = getOrSum(tmp);</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == INF ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumSubarrayLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = INF;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; orsum; <span class="comment">// orsum 表示遍历到 i 时，sum: 对应的最短子数组的左端点 left</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 首先，往 i-1 中加入了一个元素，全算一次 or，递减的</span></span><br><span class="line">            <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">            orsum.emplace_back(<span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; orsum.size(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> &amp;[key, val] = orsum[j];</span><br><span class="line">                key |= nums[i];</span><br><span class="line">                <span class="keyword">if</span> (key &gt;= k) ans = min(ans, i - val + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 看和末尾的是不是一样，一样的话已经修改了，需要修改一下second，不一样的话就是变小了，放进去</span></span><br><span class="line">                <span class="keyword">if</span> (orsum[size].first == key) orsum[size].second = val;</span><br><span class="line">                <span class="keyword">else</span> orsum[++size] = orsum[j];</span><br><span class="line">            &#125;</span><br><span class="line">            orsum.resize(size + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == INF ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      子数组 OR/AND/GCD 通用模板，注意原地去重操作。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="ds" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/ds/"/>
    
    
      <category term="位运算" scheme="https://www.luobuyu.site/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="原地去重" scheme="https://www.luobuyu.site/tags/%E5%8E%9F%E5%9C%B0%E5%8E%BB%E9%87%8D/"/>
    
      <category term="子数组" scheme="https://www.luobuyu.site/tags/%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>1553. 吃掉 N 个橘子的最少天数</title>
    <link href="https://www.luobuyu.site/2024/minimum-number-days-eat-oranges/"/>
    <id>https://www.luobuyu.site/2024/minimum-number-days-eat-oranges/</id>
    <published>2024-05-12T10:09:54.000Z</published>
    <updated>2024-10-30T14:47:37.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1553-吃掉-N-个橘子的最少天数"><a href="#1553-吃掉-N-个橘子的最少天数" class="headerlink" title="1553.吃掉 N 个橘子的最少天数"></a><a href="https://leetcode.cn/problems/minimum-number-of-days-to-eat-n-oranges/" target="_blank" rel="noopener">1553.吃掉 N 个橘子的最少天数</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>厨房里总共有 <code>n</code> 个橘子，你决定每一天选择如下方式之一吃这些橘子：</p><ul><li>吃掉一个橘子。</li><li>如果剩余橘子数 <code>n</code> 能被 2 整除，那么你可以吃掉 <code>n/2</code> 个橘子。</li><li>如果剩余橘子数 <code>n</code> 能被 3 整除，那么你可以吃掉 <code>2*(n/3)</code> 个橘子。</li></ul><p>每天你只能从以上 3 种方案中选择一种方案。</p><p>请你返回吃掉所有 <code>n</code> 个橘子的最少天数。</p><p>数据范围：</p><p> $1\le n \le 2\times 10^9$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>操作一的次数有限，主要是需要靠操作二和操作三。</p><p>如果 $n$ 不能被 $2$ 和 $3$ 整除，就需要使用操作一，调整到能使用 $2$ 或 $3$ 。调整的次数为 $1$ 或 $2$ 。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDays</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!mp.count(n))</span><br><span class="line">            mp[n] = <span class="number">1</span> + min(n % <span class="number">2</span> + minDays(n / <span class="number">2</span>), n % <span class="number">3</span> + minDays(n / <span class="number">3</span>));</span><br><span class="line">        <span class="keyword">return</span> mp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用记忆化搜索，但是需要注意的是尽量使用后面两种操作。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/dp/"/>
    
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
      <category term="记忆化搜索" scheme="https://www.luobuyu.site/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>原地hash</title>
    <link href="https://www.luobuyu.site/2024/hash-in-place/"/>
    <id>https://www.luobuyu.site/2024/hash-in-place/</id>
    <published>2024-04-08T07:22:22.000Z</published>
    <updated>2024-10-30T14:47:37.480Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="原地hash"><a href="#原地hash" class="headerlink" title="原地hash"></a>原地hash</h2><p>可以用来找缺失的第一个数，或者是重复的数字。</p><h3 id="缺失的第一个正整数"><a href="#缺失的第一个正整数" class="headerlink" title="缺失的第一个正整数"></a><a href="https://www.nowcoder.com/practice/50ec6a5b0e4e45348544348278cdcee5?tpId=295&amp;tqId=2188893&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj" target="_blank" rel="noopener">缺失的第一个正整数</a></h3><p>给定一个无重复元素的整数数组nums，请你找出其中没有出现的最小的正整数</p><p>进阶： 空间复杂度 $O(1)$ ，时间复杂度 $O(n)$ 。</p><p>数据范围：</p><p> $-2^{31} \le nums[i] \le 2^{31} - 1$ </p><p> $0\le len(nums) \le 5 \times 10^5$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>做法一：</p><p>原地hash操作，可以对存在的数字 $x$ ，在对应的下标 $nums[x]$ 上打上标记，这个标记可以是将其乘以 $-1$ 。</p><p>首先对 $ \le 0$ 的数变为 $n + 1$ 。</p><p>然后每次遇到 $nums[i]$ ，如果 $|nums[i]| \in [1, n]$ 则将 $nums[|nums[i - 1]| - 1]$ 变为 $-|nums[|nums[i - 1]| - 1]|$ 。注意需要取绝对值之后再取反。</p><p>再次遍历数组，如果遇到一个元素 $nums[i] \gt 0$ 则直接返回 $i + 1$ 。</p><p>做法二：</p><p>还可以使用交换的操作。把 $nums[i]$ 通过交换放到 $nums[nums[i] - 1]$ 的位置上，这样的话每个元素都有自己的位置。</p><p>首先，如果 $nums[i] \le 0$ ，将 $nums[i] = n + 1$ 。</p><p>然后每次遇到 $nums[i] \in [1, n]$ ，判断一下 $nums[nums[i] - 1] = nums[i]$ ，不相等的话就交换，直到二者相等。</p><p>最后再次遍历数组，如果遇到 $nums[i] \neq i + 1$ ，则直接返回 $i + 1$ 。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param nums int整型vector</span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberDisappeared</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// [1, n]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                nums[i] = n + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(nums[i]) &gt;= <span class="number">1</span> &amp;&amp; <span class="built_in">abs</span>(nums[i]) &lt;= n) &#123;</span><br><span class="line">                nums[<span class="built_in">abs</span>(nums[i]) - <span class="number">1</span>] = -<span class="built_in">abs</span>(nums[<span class="built_in">abs</span>(nums[i]) - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param nums int整型vector</span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberDisappeared</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                nums[i] = n + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] &gt;= <span class="number">1</span> &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                swap(nums[nums[i] - <span class="number">1</span>], nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line">        <span class="comment">//     cout &lt;&lt; nums[i] &lt;&lt; ", ";</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">int</span> ans = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="442-数组中重复的数据"><a href="#442-数组中重复的数据" class="headerlink" title="442. 数组中重复的数据"></a><a href="https://leetcode.cn/problems/find-all-duplicates-in-an-array/description/" target="_blank" rel="noopener">442. 数组中重复的数据</a></h3><p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，其中 <code>nums</code> 的所有整数都在范围 <code>[1, n]</code> 内，且每个整数出现 <strong>一次</strong> 或 <strong>两次</strong> 。请你找出所有出现 <strong>两次</strong> 的整数，并以数组形式返回。</p><p>你必须设计并实现一个时间复杂度为 <code>O(n)</code> 且仅使用常量额外空间的算法解决此问题。</p><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p>也是使用原地hash操作。</p><p>做法一：</p><p>每次将 $nums[|nums[i]| - 1]$ 变成相反数，如果之前是负数，那么就需要把他加入答案，因为出现了两次。如果之前是正数，那么就变为负数，因为第一次出现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[<span class="built_in">abs</span>(nums[i]) - <span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ans.emplace_back(<span class="built_in">abs</span>(nums[i]));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[<span class="built_in">abs</span>(nums[i]) - <span class="number">1</span>] = <span class="number">-1</span> * nums[<span class="built_in">abs</span>(nums[i]) - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>做法二：</p><p>使用交换操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                swap(nums[nums[i] - <span class="number">1</span>], nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                ans.emplace_back(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      原地hash操作
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="ds" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/ds/"/>
    
    
      <category term="原地hash" scheme="https://www.luobuyu.site/tags/%E5%8E%9F%E5%9C%B0hash/"/>
    
  </entry>
  
  <entry>
    <title>442. 数组中重复的数据</title>
    <link href="https://www.luobuyu.site/2024/find-all-duplicates-array/"/>
    <id>https://www.luobuyu.site/2024/find-all-duplicates-array/</id>
    <published>2024-04-01T13:55:55.000Z</published>
    <updated>2024-10-30T14:47:37.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="442-数组中重复的数据"><a href="#442-数组中重复的数据" class="headerlink" title="442.数组中重复的数据"></a><a href="https://leetcode.cn/problems/find-all-duplicates-in-an-array/" target="_blank" rel="noopener">442.数组中重复的数据</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，其中 <code>nums</code> 的所有整数都在范围 <code>[1, n]</code> 内，且每个整数出现 <strong>一次</strong> 或 <strong>两次</strong> 。请你找出所有出现 <strong>两次</strong> 的整数，并以数组形式返回。</p><p>你必须设计并实现一个时间复杂度为 <code>O(n)</code> 且仅使用常量额外空间的算法解决此问题。</p><p>数据范围：</p><p> $1\le n \le 10^5$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>考虑把每个数放到原来的位置，这样剩下的 $nums[i] \neq i - 1$ 的元素就是重复元素了。</p><p>如何放？</p><p>可以考虑 $nums[i]$ 和 $nums[nums[i] - 1]$ ，如果不相同就交换。</p><p>不能直接 <code>while(i != nums[i - 1])</code>，这样的话很可能会死循环。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] != nums[nums[i] - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(nums[i], nums[nums[i] - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] - <span class="number">1</span> != i)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.emplace_back(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      考虑交换，不能考虑环了。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="ds" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/ds/"/>
    
    
      <category term="思维" scheme="https://www.luobuyu.site/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>2312. 卖木头块</title>
    <link href="https://www.luobuyu.site/2024/selling-pieces-of-wood/"/>
    <id>https://www.luobuyu.site/2024/selling-pieces-of-wood/</id>
    <published>2024-03-15T07:01:17.000Z</published>
    <updated>2024-10-30T14:47:37.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="2312-卖木头块"><a href="#2312-卖木头块" class="headerlink" title="2312.卖木头块"></a><a href="https://leetcode.cn/problems/selling-pieces-of-wood/" target="_blank" rel="noopener">2312.卖木头块</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你两个整数 <code>m</code> 和 <code>n</code> ，分别表示一块矩形木块的高和宽。同时给你一个二维整数数组 <code>prices</code> ，其中 <code>prices[i] = [hi, wi, pricei]</code> 表示你可以以 <code>pricei</code> 元的价格卖一块高为 <code>hi</code> 宽为 <code>wi</code> 的矩形木块。</p><p>每一次操作中，你必须按下述方式之一执行切割操作，以得到两块更小的矩形木块：</p><ul><li>沿垂直方向按高度 <strong>完全</strong> 切割木块，或</li><li>沿水平方向按宽度 <strong>完全</strong> 切割木块</li></ul><p>在将一块木块切成若干小木块后，你可以根据 <code>prices</code> 卖木块。你可以卖多块同样尺寸的木块。你不需要将所有小木块都卖出去。你 <strong>不能</strong> 旋转切好后木块的高和宽。</p><p>请你返回切割一块大小为 <code>m x n</code> 的木块后，能得到的 <strong>最多</strong> 钱数。</p><p>注意你可以切割木块任意次。</p><p>数据范围：</p><p> $1\le m, n \le 200, 1\le prices.len \le 2\times 10^4$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>直接设 $dp[i][j]$ 表示长度为 $i$ ，宽度为 $j$ 的木块卖完之后的最大价值。然后可以枚举切分这块木板，枚举横着切，竖着切。</p><p>四层循环。</p><p>需要使用 $hash$ 表记录一下目标木板。如果当前的 $i,j$ 是目标木板，直接更新一下价值，然后再枚举切分。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PairHash</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">size_t</span> <span class="title">operator</span>()(<span class="title">const</span> <span class="title">pair</span>&lt;T, U&gt; &amp;<span class="title">p</span>) <span class="title">const</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">return</span> hash&lt;T&gt;()(p.first) ^ hash&lt;U&gt;()(p.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sellingWood</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;prices)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="title">dp</span><span class="params">(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(n + <span class="number">1</span>))</span></span>; <span class="comment">// 切割一块长宽为m,n的木块，最多能得到的钱数。</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>, PairHash&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;price : prices)</span><br><span class="line">            mp[&#123;price[<span class="number">0</span>], price[<span class="number">1</span>]&#125;] = price[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (mp.count(&#123;i, j&#125;))</span><br><span class="line">                    dp[i][j] += mp[&#123;i, j&#125;];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt; i; ++r)</span><br><span class="line">                    dp[i][j] = max(dp[i][j], dp[r][j] + dp[i - r][j]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt; j; ++c)</span><br><span class="line">                    dp[i][j] = max(dp[i][j], dp[i][c] + dp[i][j - c]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用动态规划，枚举切分位置
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/dp/"/>
    
    
      <category term="思维" scheme="https://www.luobuyu.site/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
      <category term="hash" scheme="https://www.luobuyu.site/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>403. 青蛙过河</title>
    <link href="https://www.luobuyu.site/2024/frog-jump/"/>
    <id>https://www.luobuyu.site/2024/frog-jump/</id>
    <published>2024-03-13T08:22:24.000Z</published>
    <updated>2024-10-30T14:47:37.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="403-青蛙过河"><a href="#403-青蛙过河" class="headerlink" title="403.青蛙过河"></a><a href="https://leetcode.cn/problems/frog-jump/" target="_blank" rel="noopener">403.青蛙过河</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。</p><p>给你石子的位置列表 <code>stones</code>（用单元格序号 <strong>升序</strong> 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃 <code>1</code> 个单位（即只能从单元格 1 跳至单元格 2 ）。</p><p>如果青蛙上一步跳跃了 <code>k</code> 个单位，那么它接下来的跳跃距离只能选择为 <code>k - 1</code>、<code>k</code> 或 <code>k + 1</code> 个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。</p><p>数据范围：</p><p> $2 \le stones.len \le 2000, 0 \le stones[i] \le 2^{31} - 1, stones[0] = 0$ </p><p>严格升序</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>设计dp状态 $dp[i][j]$ 表示当前在 $i$ 下标，上一步跳了 $j$ 个单位，但是 $j$ 的范围不确定，可以使用 <code>unordered_map</code>。然后枚举上一步跳到了 $k, k\in [0, i)$ ，然后两者之间的距离是 $d = stones[i] - stones[k]$ ，如果 $dp[k][d - 1] \or dp[k][d] \or dp[k][d + 1]$ ，那么 $dp[i][d] = true$ 。</p><p>后续发现，每次最多比上一次多跳一个单位，因为 $0$ 是 $1$ ，则 $i$ 最多是 $i + 1$ 。可以直接使用二维数组，不用使用 <code>unordered_map</code>。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canCross</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;stones)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = stones.size();</span><br><span class="line">        <span class="keyword">if</span> (stones[<span class="number">1</span>] - stones[<span class="number">0</span>] &gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>; <span class="comment">// 记录 dp[i][pre_k]</span></span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> k = stones[i] - stones[j];</span><br><span class="line">                <span class="keyword">if</span> (k &gt; j + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][k] = dp[j][k - <span class="number">1</span>] || dp[j][k] || dp[j][k + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (i == n - <span class="number">1</span> &amp;&amp; dp[i][k])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用动态规划，需要注意上一步跳了多远。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/dp/"/>
    
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
      <category term="优化" scheme="https://www.luobuyu.site/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>100216. K 个不相交子数组的最大能量值</title>
    <link href="https://www.luobuyu.site/2024/maximum-strength-k-subarrays/"/>
    <id>https://www.luobuyu.site/2024/maximum-strength-k-subarrays/</id>
    <published>2024-03-10T09:33:09.000Z</published>
    <updated>2024-10-30T14:47:37.448Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="100216-K-个不相交子数组的最大能量值"><a href="#100216-K-个不相交子数组的最大能量值" class="headerlink" title="100216.K 个不相交子数组的最大能量值"></a><a href="https://leetcode.cn/problems/maximum-strength-of-k-disjoint-subarrays/" target="_blank" rel="noopener">100216.K 个不相交子数组的最大能量值</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个长度为 <code>n</code> 下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和一个 <strong>正奇数</strong> 整数 <code>k</code> 。</p><p><code>x</code> 个子数组的能量值定义为 <code>strength = sum[1] * x - sum[2] * (x - 1) + sum[3] * (x - 2) - sum[4] * (x - 3) + ... + sum[x] * 1</code> ，其中 <code>sum[i]</code> 是第 <code>i</code> 个子数组的和。更正式的，能量值是满足 <code>1 &lt;= i &lt;= x</code> 的所有 <code>i</code> 对应的 <code>(-1)i+1 * sum[i] * (x - i + 1)</code> 之和。</p><p>你需要在 <code>nums</code> 中选择 <code>k</code> 个 <strong>不相交子数组</strong> ，使得 <strong>能量值最大</strong> 。</p><p>请你返回可以得到的 <strong>最大能量值</strong> 。</p><p><strong>注意</strong>，选出来的所有子数组 <strong>不</strong> 需要覆盖整个数组。</p><p>数据范围：</p><p> $1\le n \le 10^4, 1\le k \le n, 1\le n \times k \le 10^6, 1\le nums[i] \le 10^9$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>数据范围暗示需要 $n\times k$ 的复杂度。</p><p>子数组的和需要使用前缀和得到。可以预先处理出 $preSum[i], i \in [1, n]$ </p><p>假设 $dp[i][j]$ 表示从 $[1, \cdots,i]$ 划分为 $j, j\in[1, i]$ 段的最大能量值，则</p><script type="math/tex; mode=display">\begin{align}dp[i][j] = \max(& dp[i][j], \\& dp[i - 1][j], \\& dp[p][j - 1] + tmp \times (preSum[i] - preSum[p]) \times (k - j + 1))\end{align}</script><p>如果不取 $nums[i]$ 的话，直接跳过，就是 $dp[i - 1][j]$ 。如果考虑取 $nums[i]$ 的话，就需要枚举上一段的终点了。假设上一段的终点是 $p$ ，上一段划分了 $j - 1$ 个子数组，那么 $p \in [j - 1, i - 1]$ 。</p><p>需要注意的是 $i$ 和 $j$ 之间也是有范围约束的。如果先枚举 $i$ ，那么 $j \in [1, min(i, k)]$ 。如果先枚举 $j$ ，那么 $i \in [j, n + j - k]$ ，因为 $n - i \ge k - j$ ，需要保证后面 $n - i$ 个元素能划分出来 $k - j$ 段。</p><p>但是三重循环的话应该会超时。</p><p>考虑对递推公式转化一下</p><script type="math/tex; mode=display">\begin{align}dp[i][j] = \max(& dp[i][j], \\& dp[i - 1][j], \\& (tmp \times preSum[i] \times (k - j + 1))  + (dp[p][j - 1] - tmp \times preSum[p] \times (k - j + 1)))\end{align}</script><p>看做两项作差的形式，那么只有后一项与 $p$ 有关，其中 $p \in [j - 1, i - 1]$ 。可以考虑维护 $dp[p][j - 1] - tmp \times preSum[p] \times (k - j + 1)$ 的最大值，因为 $p$ 最大是 $i - 1$ 。每增加一下 $i$ ，都需要更新一下最大值。</p><p>如果先枚举 $j, j\in [1, k]$ ，再枚举 $i, i\in [j, n + j - k]$ 。可以考虑在循环 $i, i\in [j, n + j - k]$ 之前，先用循环求出 $i \in [0, j - 1]$ ， $maxx = dp[i][j - 1] - tmp \times preSum[i] \times (k - j + 1)$ 。</p><p>然后再循环 $i$ ，在循环内部，每次更新 $dp[i][j]$ 之后，需要更新一下 $maxx$ 。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">maximumStrength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">preSum</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            preSum[i] = preSum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(k + <span class="number">1</span>, -INF_LL))</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// dp[i][j] = dp[k]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> kk = <span class="number">1</span>; kk &lt;= k; ++kk)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = kk; i &lt;= n - k + kk; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = max(kk - <span class="number">1</span>, <span class="number">1</span>); j &lt;= i; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = (kk &amp; <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">                    dp[i][kk] = max(dp[i][kk], max(dp[i - <span class="number">1</span>][kk], dp[j - <span class="number">1</span>][kk - <span class="number">1</span>] + tmp * (preSum[i] - preSum[j - <span class="number">1</span>]) * (k - kk + <span class="number">1</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">maximumStrength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">preSum</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            preSum[i] = preSum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(n + <span class="number">1</span>, -INF_LL))</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// dp[i][j] = dp[k]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> kk = <span class="number">1</span>; kk &lt;= k; ++kk)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> maxx = -INF_LL;</span><br><span class="line">            <span class="keyword">int</span> tmp = (kk &amp; <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; kk; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                maxx = max(maxx, dp[i][kk - <span class="number">1</span>] - tmp * preSum[i] * (k - kk + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = kk; i &lt;= n - k + kk; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][kk] = max(dp[i][kk], max(dp[i - <span class="number">1</span>][kk], maxx + tmp * preSum[i] * (k - kk + <span class="number">1</span>)));</span><br><span class="line">                maxx = max(maxx, dp[i][kk - <span class="number">1</span>] - tmp * preSum[i] * (k - kk + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      直接考虑划分dp，但是需要三重循环，考虑如何优化掉一重循环。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/dp/"/>
    
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
      <category term="dp优化" scheme="https://www.luobuyu.site/tags/dp%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2386. 找出数组的第 K 大和</title>
    <link href="https://www.luobuyu.site/2024/find-k-sum-array/"/>
    <id>https://www.luobuyu.site/2024/find-k-sum-array/</id>
    <published>2024-03-09T09:09:03.000Z</published>
    <updated>2024-10-30T14:47:37.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="2386-找出数组的第-K-大和"><a href="#2386-找出数组的第-K-大和" class="headerlink" title="2386.找出数组的第 K 大和"></a><a href="https://leetcode.cn/problems/find-the-k-sum-of-an-array/" target="_blank" rel="noopener">2386.找出数组的第 K 大和</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个整数数组 <code>nums</code> 和一个 <strong>正</strong> 整数 <code>k</code> 。你可以选择数组的任一 <strong>子序列</strong> 并且对其全部元素求和。</p><p>数组的 <strong>第 k 大和</strong> 定义为：可以获得的第 <code>k</code> 个 <strong>最大</strong> 子序列和（子序列和允许出现重复）</p><p>返回数组的 <strong>第 k 大和</strong> 。</p><p>子序列是一个可以由其他数组删除某些或不删除元素排生而来的数组，且派生过程不改变剩余元素的顺序。</p><p><strong>注意：</strong>空子序列的和视作 <code>0</code> 。</p><p>数据范围：</p><p> $1\le n \le 10^5, -10^9 \le nums[i] \le 10^9$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>子序列限制比较弱，可以随便选，和子集差不多。</p><p>如果全是非负数，可以直接排序。考虑找出数组第 $k$ 小的子序列和，然后用子序列和的最大值减去他就能得到答案。</p><p>考虑如何得到最小的 $k$ 个子序列的和，可以先直接从小到大排序。</p><p>初始为 <code>[]</code>，然后考虑加入 <code>[nums[0]]</code></p><p><code>[nums[0]]</code> 考虑继续加 <code>[nums[0], nums[1]]</code>，或者改为 <code>[nums[1]]</code></p><p>就这样，每次修改当前最后一个元素，改为 $i + 1$ ，或者直接加入 $i + 1$ 。</p><p>可以使用 <code>[sum, index]</code>来表示，然后用堆维护，每次取出最小的 <code>[sum, index]</code>，然后加入 <code>[sum - nums[index] + nums[index + 1], index + 1]</code>，<code>[sum + nums[index + 1], index + 1]</code></p><p>如果存在负数，可以把所有的负数变成绝对值。然后用上述方法求出结果。</p><p>然后对每一个子序列的结果，加上所有负数的和，可以得到对应的子序列，大小关系是保持不变的。</p><p>假设所有非负数和为 $sum1$ ，所有负数和为 $sum2$ 。则所有元素和为 $sum1 - sum2$ 。假设最后得到的第 $k$ 小和为 $sum$ 。</p><p>则 $(sum1 - sum2 - sum) + sum2 = sum1 - sum$ </p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">kSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 最大的是所有的非负数。</span></span><br><span class="line">        <span class="comment">// 一下个，加一个最小的负数，或者删去一个最小的数。</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sumneg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : nums)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">                sumneg += x, x *= <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;&gt; q;</span><br><span class="line">        q.push(&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;);</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> out = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">int</span> curIndex = out.second;</span><br><span class="line">            <span class="keyword">if</span> (curIndex + <span class="number">1</span> &lt; n)</span><br><span class="line">                q.push(&#123;out.first + nums[curIndex + <span class="number">1</span>], curIndex + <span class="number">1</span>&#125;);</span><br><span class="line">            <span class="keyword">if</span> (curIndex &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (curIndex + <span class="number">1</span> &lt; n)</span><br><span class="line">                    q.push(&#123;out.first - nums[curIndex] + nums[curIndex + <span class="number">1</span>], curIndex + <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum - q.top().first - sumneg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      首先全是非负数的比较好做，如果存在负数，考虑转化。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
    
      <category term="思维" scheme="https://www.luobuyu.site/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="堆" scheme="https://www.luobuyu.site/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>P1631 序列合并</title>
    <link href="https://www.luobuyu.site/2024/sequence-merge/"/>
    <id>https://www.luobuyu.site/2024/sequence-merge/</id>
    <published>2024-03-09T08:45:52.000Z</published>
    <updated>2024-10-30T14:47:37.476Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="P1631-序列合并"><a href="#P1631-序列合并" class="headerlink" title="P1631.序列合并"></a><a href="https://www.luogu.com.cn/problem/P1631" target="_blank" rel="noopener">P1631.序列合并</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>有两个长度为 $N$ 的<strong>单调不降</strong>序列 $A,B$ ，在 $A,B$ 中各取一个数相加可以得到 $N^2$ 个和，求这 $N^2$ 个和中最小的 $N$ 个。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行一个正整数 $N$ ；</p><p>第二行 $N$ 个整数 $A_1,\cdots,A_N$ 。</p><p>第三行 $N$ 个整数 $B_1,\cdots,B_N$ 。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行 $N$ 个整数，从小到大表示这 $N$ 个最小的和。</p><p>数据范围：</p><p> $1\le N \le 10^5, 1\le a_i, b_i, \le 10^9$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>可以看做 $k$ 个有序链表合并。</p><p> $a_1 + b_1, a_1 + b_2, \cdots, a_1 +b_n$ </p><p> $a_2 + b_1, a_2 +b_2, \cdots,a_2 + b_n$ </p><p> $\ldots$ </p><p> $a_n + b_1, a_n + b_2, \cdots, a_n + b_n$ </p><p>先加入一组 $a_i + b_1$ </p><p>然后每取出一个，就把他的后面一个加入堆中。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FAST_IO;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> t, n, m, k;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// #define COMP_DATA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(b[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;tuple&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;tuple&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;tuple&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        q.push(&#123;a[i] + b[<span class="number">1</span>], i, <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">1</span>; cnt &lt;= n; ++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> out = q.top();</span><br><span class="line">        <span class="keyword">auto</span> [sum, indexa, indexb] = out;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">if</span> (indexb + <span class="number">1</span> &lt;= n)</span><br><span class="line">            q.push(&#123;sum - b[indexb] + b[indexb + <span class="number">1</span>], indexa, indexb + <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      第K大和。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="luogu" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/luogu/"/>
    
    
      <category term="第k大" scheme="https://www.luobuyu.site/tags/%E7%AC%ACk%E5%A4%A7/"/>
    
  </entry>
  
  <entry>
    <title>1976. 到达目的地的方案数</title>
    <link href="https://www.luobuyu.site/2024/number-ways-arrive-destination/"/>
    <id>https://www.luobuyu.site/2024/number-ways-arrive-destination/</id>
    <published>2024-03-05T06:57:59.000Z</published>
    <updated>2024-10-30T14:47:37.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1976-到达目的地的方案数"><a href="#1976-到达目的地的方案数" class="headerlink" title="1976.到达目的地的方案数"></a><a href="https://leetcode.cn/problems/number-of-ways-to-arrive-at-destination/" target="_blank" rel="noopener">1976.到达目的地的方案数</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>你在一个城市里，城市由 <code>n</code> 个路口组成，路口编号为 <code>0</code> 到 <code>n - 1</code> ，某些路口之间有 <strong>双向</strong> 道路。输入保证你可以从任意路口出发到达其他任意路口，且任意两个路口之间最多有一条路。</p><p>给你一个整数 <code>n</code> 和二维整数数组 <code>roads</code> ，其中 <code>roads[i] = [ui, vi, timei]</code> 表示在路口 <code>ui</code> 和 <code>vi</code> 之间有一条需要花费 <code>timei</code> 时间才能通过的道路。你想知道花费 <strong>最少时间</strong> 从路口 <code>0</code> 出发到达路口 <code>n - 1</code> 的方案数。</p><p>请返回花费 <strong>最少时间</strong> 到达目的地的 <strong>路径数目</strong> 。由于答案可能很大，将结果对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p>数据范围：</p><p> $1\le n \le 200, 1\le time_i \le 10^9$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>dijkstra 求最短路径方案数，本质就是利用三角不等式更新的时候，更新一下路径条数。</p><p>如果 $dis[v] = dis[u] + w$ ，则 $cnt[v] = cnt[v] + cnt[u]$ 。</p><p>如果 $dis[v] \gt dis[u] + 2$ ， 则 $cnt[v] = cnt[u]$ 。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; dis;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; g;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countPaths</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;roads)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        g.resize(n);</span><br><span class="line">        vis.resize(n);</span><br><span class="line">        cnt.resize(n);</span><br><span class="line">        dis.resize(n, INF_LL);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;edge : roads)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>], w = edge[<span class="number">2</span>];</span><br><span class="line">            g[u].emplace_back(v, w);</span><br><span class="line">            g[v].emplace_back(u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; q; <span class="comment">// -dis, node</span></span><br><span class="line">        q.push(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (q.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> out = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">int</span> u = out.second;</span><br><span class="line">            <span class="keyword">if</span> (vis[u])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            vis[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (u == n - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = g[u][i].first, w = g[u][i].second;</span><br><span class="line">                <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[v] = dis[u] + w;</span><br><span class="line">                    cnt[v] = cnt[u];</span><br><span class="line">                    q.push(&#123;-dis[v], v&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (dis[v] == dis[u] + w)</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt[v] = (cnt[v] + cnt[u]) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dis[n - <span class="number">1</span>] &lt;&lt; <span class="string">", "</span> &lt;&lt; cnt[n - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> cnt[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      dijkstra求最短路径方案数，利用三角不等式。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="graph" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/graph/"/>
    
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
      <category term="dijkstra" scheme="https://www.luobuyu.site/tags/dijkstra/"/>
    
      <category term="路径数" scheme="https://www.luobuyu.site/tags/%E8%B7%AF%E5%BE%84%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>100246. 将元素分配到两个数组中 II</title>
    <link href="https://www.luobuyu.site/2024/distribute-elements-into-arraysii/"/>
    <id>https://www.luobuyu.site/2024/distribute-elements-into-arraysii/</id>
    <published>2024-03-03T08:29:13.000Z</published>
    <updated>2024-10-30T14:47:37.448Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="100246-将元素分配到两个数组中-II"><a href="#100246-将元素分配到两个数组中-II" class="headerlink" title="100246.将元素分配到两个数组中 II"></a><a href="https://leetcode.cn/problems/distribute-elements-into-two-arrays-ii" target="_blank" rel="noopener">100246.将元素分配到两个数组中 II</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个下标从 <strong>1</strong> 开始、长度为 <code>n</code> 的整数数组 <code>nums</code> 。</p><p>现定义函数 <code>greaterCount</code> ，使得 <code>greaterCount(arr, val)</code> 返回数组 <code>arr</code> 中 <strong>严格大于</strong> <code>val</code> 的元素数量。</p><p>你需要使用 <code>n</code> 次操作，将 <code>nums</code> 的所有元素分配到两个数组 <code>arr1</code> 和 <code>arr2</code> 中。在第一次操作中，将 <code>nums[1]</code> 追加到 <code>arr1</code> 。在第二次操作中，将 <code>nums[2]</code> 追加到 <code>arr2</code> 。之后，在第 <code>i</code> 次操作中：</p><ul><li>如果 <code>greaterCount(arr1, nums[i]) &gt; greaterCount(arr2, nums[i])</code> ，将 <code>nums[i]</code> 追加到 <code>arr1</code> 。</li><li>如果 <code>greaterCount(arr1, nums[i]) &lt; greaterCount(arr2, nums[i])</code> ，将 <code>nums[i]</code> 追加到 <code>arr2</code> 。</li><li>如果 <code>greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i])</code> ，将 <code>nums[i]</code> 追加到元素数量较少的数组中。</li><li>如果仍然相等，那么将 <code>nums[i]</code> 追加到 <code>arr1</code> 。</li></ul><p>连接数组 <code>arr1</code> 和 <code>arr2</code> 形成数组 <code>result</code> 。例如，如果 <code>arr1 == [1,2,3]</code> 且 <code>arr2 == [4,5,6]</code> ，那么 <code>result = [1,2,3,4,5,6]</code> 。</p><p>返回整数数组 <code>result</code> 。</p><p>数据范围：</p><p> $3\le n \le 10^5, 1\le nums[i] \le 10^9$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>关键在于如何求一个数组中大于 $val$ 的元素个数。如果是有序的，可以直接使用 <code>upper_bound</code> 解决。注意到 <code>multiset</code>是有序的，可以用这个，但是这个返回的是迭代器，求 $it, multiset.end$ 之间的元素个数，只能用 <code>distance</code>，这个复杂度是 $O(n)$ 的，太慢了。</p><p>考虑python中的 <code>SortedList</code>，需要导入包<code>from sortedcontainers import SortedList</code>，底层是对 <code>list</code> 的一些优化，返回的还是数组的下标。<code>SortedList.bisect_right()</code></p><p>python中的二分查找，需要导入包 <code>import bisect</code>。<code>bisect_right</code> 查找 <code>&gt;</code>，<code>bisect_left</code>查找 <code>&gt;=</code>。</p><p>也有线段树的做法：</p><p>可以先对所有的数据排序，离散化，然后把离散化之后的数据作为数组下标，数组中记录出现的次数，这样的话，查询大于 <code>val</code> 的元素个数，只需要求 <code>[val+1,n]</code> 的后缀和。</p><p>考虑线段树单点修改，每次对 <code>hash(nums[i])</code> 下标加 <code>1</code>。然后区间查询，查询区间的元素个数之和。</p><p>可以查询 <code>[1, hash(nums[i])]</code> 或者 <code>[hash(nums[i]), n]</code>。</p><p>也可以使用树状数组的做法：</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resultArray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        arr1 = [nums[<span class="number">0</span>]]</span><br><span class="line">        mp1 = SortedList([nums[<span class="number">0</span>]])</span><br><span class="line">        arr2 = [nums[<span class="number">1</span>]]</span><br><span class="line">        mp2 = SortedList([nums[<span class="number">1</span>]])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">            index1 = mp1.bisect_right(nums[i])</span><br><span class="line">            index2 = mp2.bisect_right(nums[i])</span><br><span class="line">            cnt1 = len(mp1) - index1</span><br><span class="line">            cnt2 = len(mp2) - index2</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cnt1 &gt; cnt2:</span><br><span class="line">                arr1.append(nums[i])</span><br><span class="line">                mp1.add(nums[i])</span><br><span class="line">            <span class="keyword">elif</span> cnt1 &lt; cnt2:</span><br><span class="line">                arr2.append(nums[i])</span><br><span class="line">                mp2.add(nums[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> len(mp1) &lt;= len(mp2):</span><br><span class="line">                    arr1.append(nums[i])</span><br><span class="line">                    mp1.add(nums[i])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    arr2.append(nums[i])</span><br><span class="line">                    mp2.add(nums[i])</span><br><span class="line">        <span class="keyword">return</span> arr1 + arr2</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">int</span> sum;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;TreeNode&gt; tree;</span><br><span class="line">    SegTree(<span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        tree.resize((n + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tree[cur].l = l, tree[cur].r = r;</span><br><span class="line">        tree[cur].sum = <span class="number">0</span>;</span><br><span class="line">        tree[cur].val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(cur &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> index, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[cur].l == tree[cur].r)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[cur].val += k;</span><br><span class="line">            tree[cur].sum += k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = tree[cur].l + tree[cur].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= mid)</span><br><span class="line">            update(cur &lt;&lt; <span class="number">1</span>, index, k);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= mid + <span class="number">1</span>)</span><br><span class="line">            update(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, index, k);</span><br><span class="line">        tree[cur].sum = tree[cur &lt;&lt; <span class="number">1</span>].sum + tree[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= tree[cur].l &amp;&amp; tree[cur].r &lt;= r)</span><br><span class="line">            <span class="keyword">return</span> tree[cur].sum;</span><br><span class="line">        <span class="keyword">int</span> mid = tree[cur].l + tree[cur].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">            sum += query(cur &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= r)</span><br><span class="line">            sum += query(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mp.count(num))</span><br><span class="line">            mp[num] = ++size;</span><br><span class="line">        <span class="keyword">return</span> mp[num];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">resultArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr1, arr2;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp = nums;</span><br><span class="line">        sort(tmp.begin(), tmp.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : tmp)</span><br><span class="line">            hash(x);</span><br><span class="line">        SegTree seg1(size), seg2(size);</span><br><span class="line">        seg1.build(<span class="number">1</span>, <span class="number">1</span>, size);</span><br><span class="line">        seg2.build(<span class="number">1</span>, <span class="number">1</span>, size);</span><br><span class="line">        arr1.emplace_back(nums[<span class="number">0</span>]);</span><br><span class="line">        seg1.update(<span class="number">1</span>, hash(nums[<span class="number">0</span>]), <span class="number">1</span>);</span><br><span class="line">        arr2.emplace_back(nums[<span class="number">1</span>]);</span><br><span class="line">        seg2.update(<span class="number">1</span>, hash(nums[<span class="number">1</span>]), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> p = hash(nums[i]);</span><br><span class="line">            <span class="keyword">int</span> cnt1 = seg1.query(<span class="number">1</span>, p + <span class="number">1</span>, size);</span><br><span class="line">            <span class="keyword">int</span> cnt2 = seg2.query(<span class="number">1</span>, p + <span class="number">1</span>, size);</span><br><span class="line">            <span class="keyword">if</span> (cnt1 &gt; cnt2)</span><br><span class="line">            &#123;</span><br><span class="line">                arr1.emplace_back(nums[i]);</span><br><span class="line">                seg1.update(<span class="number">1</span>, p, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cnt1 &lt; cnt2)</span><br><span class="line">            &#123;</span><br><span class="line">                arr2.emplace_back(nums[i]);</span><br><span class="line">                seg2.update(<span class="number">1</span>, p, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr1.size() &lt;= arr2.size())</span><br><span class="line">                &#123;</span><br><span class="line">                    arr1.emplace_back(nums[i]);</span><br><span class="line">                    seg1.update(<span class="number">1</span>, p, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    arr2.emplace_back(nums[i]);</span><br><span class="line">                    seg2.update(<span class="number">1</span>, p, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr1.insert(arr1.end(), arr2.begin(), arr2.end());</span><br><span class="line">        <span class="keyword">return</span> arr1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">int</span> sum;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;TreeNode&gt; tree;</span><br><span class="line">    SegTree(<span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        tree.resize((n + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tree[cur].l = l, tree[cur].r = r;</span><br><span class="line">        tree[cur].sum = <span class="number">0</span>;</span><br><span class="line">        tree[cur].val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(cur &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> index, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[cur].l == tree[cur].r)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[cur].val += k;</span><br><span class="line">            tree[cur].sum += k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = tree[cur].l + tree[cur].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= mid)</span><br><span class="line">            update(cur &lt;&lt; <span class="number">1</span>, index, k);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= mid + <span class="number">1</span>)</span><br><span class="line">            update(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, index, k);</span><br><span class="line">        tree[cur].sum = tree[cur &lt;&lt; <span class="number">1</span>].sum + tree[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= tree[cur].l &amp;&amp; tree[cur].r &lt;= r)</span><br><span class="line">            <span class="keyword">return</span> tree[cur].sum;</span><br><span class="line">        <span class="keyword">int</span> mid = tree[cur].l + tree[cur].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">            sum += query(cur &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= r)</span><br><span class="line">            sum += query(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mp.count(num))</span><br><span class="line">            mp[num] = ++size;</span><br><span class="line">        <span class="keyword">return</span> mp[num];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">resultArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr1, arr2;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp = nums;</span><br><span class="line">        sort(tmp.begin(), tmp.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : tmp)</span><br><span class="line">            hash(x);</span><br><span class="line">        SegTree seg1(size), seg2(size);</span><br><span class="line">        seg1.build(<span class="number">1</span>, <span class="number">1</span>, size);</span><br><span class="line">        seg2.build(<span class="number">1</span>, <span class="number">1</span>, size);</span><br><span class="line">        arr1.emplace_back(nums[<span class="number">0</span>]);</span><br><span class="line">        seg1.update(<span class="number">1</span>, hash(nums[<span class="number">0</span>]), <span class="number">1</span>);</span><br><span class="line">        arr2.emplace_back(nums[<span class="number">1</span>]);</span><br><span class="line">        seg2.update(<span class="number">1</span>, hash(nums[<span class="number">1</span>]), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> p = hash(nums[i]);</span><br><span class="line">            <span class="keyword">int</span> cnt1 = seg1.query(<span class="number">1</span>, p + <span class="number">1</span>, size);</span><br><span class="line">            <span class="keyword">int</span> cnt2 = seg2.query(<span class="number">1</span>, p + <span class="number">1</span>, size);</span><br><span class="line">            <span class="keyword">if</span> (cnt1 &gt; cnt2)</span><br><span class="line">            &#123;</span><br><span class="line">                arr1.emplace_back(nums[i]);</span><br><span class="line">                seg1.update(<span class="number">1</span>, p, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cnt1 &lt; cnt2)</span><br><span class="line">            &#123;</span><br><span class="line">                arr2.emplace_back(nums[i]);</span><br><span class="line">                seg2.update(<span class="number">1</span>, p, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr1.size() &lt;= arr2.size())</span><br><span class="line">                &#123;</span><br><span class="line">                    arr1.emplace_back(nums[i]);</span><br><span class="line">                    seg1.update(<span class="number">1</span>, p, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    arr2.emplace_back(nums[i]);</span><br><span class="line">                    seg2.update(<span class="number">1</span>, p, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr1.insert(arr1.end(), arr2.begin(), arr2.end());</span><br><span class="line">        <span class="keyword">return</span> arr1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用离散化加线段树，或者使用python的SortedList。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="ds" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/ds/"/>
    
    
      <category term="树状数组" scheme="https://www.luobuyu.site/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="线段树" scheme="https://www.luobuyu.site/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="SortedList" scheme="https://www.luobuyu.site/tags/SortedList/"/>
    
  </entry>
  
  <entry>
    <title>2369. 检查数组是否存在有效划分</title>
    <link href="https://www.luobuyu.site/2024/valid-partition-for-array/"/>
    <id>https://www.luobuyu.site/2024/valid-partition-for-array/</id>
    <published>2024-03-01T02:38:05.000Z</published>
    <updated>2024-10-30T14:47:37.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="2369-检查数组是否存在有效划分"><a href="#2369-检查数组是否存在有效划分" class="headerlink" title="2369.检查数组是否存在有效划分"></a><a href="https://leetcode.cn/problems/check-if-there-is-a-valid-partition-for-the-array/" target="_blank" rel="noopener">2369.检查数组是否存在有效划分</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，你必须将数组划分为一个或多个 <strong>连续</strong> 子数组。</p><p>如果获得的这些子数组中每个都能满足下述条件 <strong>之一</strong> ，则可以称其为数组的一种 <strong>有效</strong> 划分：</p><ol><li>子数组 <strong>恰</strong> 由 <code>2</code> 个相等元素组成，例如，子数组 <code>[2,2]</code> 。</li><li>子数组 <strong>恰</strong> 由 <code>3</code> 个相等元素组成，例如，子数组 <code>[4,4,4]</code> 。</li><li>子数组 <strong>恰</strong> 由 <code>3</code> 个连续递增元素组成，并且相邻元素之间的差值为 <code>1</code> 。例如，子数组 <code>[3,4,5]</code> ，但是子数组 <code>[1,3,5]</code> 不符合要求。</li></ol><p>如果数组 <strong>至少</strong> 存在一种有效划分，返回 <code>true</code> ，否则，返回 <code>false</code> 。</p><p>数据范围：</p><p> $2\le nums.len \le 10^5$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>贪心感觉不是很行，贪心的话，遇到多个相等的，不知道是 $2$ 个放一起还是 $3$ 个放一起。</p><p>考虑动态规划，可以</p><script type="math/tex; mode=display">dp[i] = \begin{cases}     dp[i] \or dp[i - 3] ,nums[i] = nums[i - 1] = nums[i - 2] \\    dp[i] \or dp[i - 2], nums[i] = nums[i - 1] \\    dp[i] \or dp[i - 3], nums[i] = nums[i - 1] + 1 = nums[i - 2] + 2\end{cases}</script><p>需要注意初始条件，可以假设 $dp[0] = true$ ，然后 $dp[1,\cdots n]$ 。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">validPartition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">2</span> &gt;= <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i - <span class="number">1</span> - <span class="number">1</span>])</span><br><span class="line">                dp[i] |= dp[i - <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">3</span> &gt;= <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i - <span class="number">1</span> - <span class="number">1</span>] &amp;&amp; nums[i - <span class="number">1</span> - <span class="number">1</span>] == nums[i - <span class="number">2</span> - <span class="number">1</span>])</span><br><span class="line">                dp[i] |= dp[i - <span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">3</span> &gt;= <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i - <span class="number">1</span> - <span class="number">1</span>] + <span class="number">1</span> &amp;&amp; nums[i - <span class="number">1</span> - <span class="number">1</span>] == nums[i - <span class="number">2</span> - <span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">                dp[i] |= dp[i - <span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用dp，枚举上一个断点。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/dp/"/>
    
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>cpp编译过程</title>
    <link href="https://www.luobuyu.site/2024/cpp-compile/"/>
    <id>https://www.luobuyu.site/2024/cpp-compile/</id>
    <published>2024-02-21T07:23:13.000Z</published>
    <updated>2024-10-30T14:47:37.476Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="cpp-编译过程"><a href="#cpp-编译过程" class="headerlink" title="cpp 编译过程"></a>cpp 编译过程</h1><h2 id="一、预编译"><a href="#一、预编译" class="headerlink" title="一、预编译"></a>一、预编译</h2><p>该过程主要是根据预处理指令（#include、#define、#if等）重新组装c++代码，经过预处理阶段，将产生一个没有注释、没有include、没有define、没有条件编译（#if/#else）等指令的<code>.i</code>文件</p><p>可以使用 <code>g++ -E main.cpp -o main.i</code> 生成 <code>.i</code> 文件</p><ul><li><p>将<code>include</code>的头文件拼接进来</p></li><li><p>将<code>define</code>宏替换</p></li><li><p>将<code>if</code> 等条件替换</p></li><li><p>保留#pragma编译器指令（非预编译指令），该指令用于设置编译器状态或指示编译器完成一些特定的动作</p><blockquote><p>在预编译阶段被处理的指令亦称伪指令（如#include、#define、#if等）<br>常见的#pragma用法有#pragma once、#pragma message等</p></blockquote></li><li><p>用#line指令（非预编译指令）强制编译器按指定的行号对源程序的代码重新编号，以便于编译时产生的错误警告能显示行号</p><blockquote><p>#line的用法一般为 #line 行号 filename，用于强制编译器按指定的行号，开始对源程序的代码重新编号，在调试的时候，可以按此规定输出错误代码的准确位置</p></blockquote><p>经过这一阶段的处理，源程序就就变成了只包含字符串和#pragma和#line的文件</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD(x, y) (x + y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1000</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ONLINE_JUDGE 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ADD(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">82</span> <span class="string">"D:/mingw64-13.1.0/lib/gcc/x86_64-w64-mingw32/13.1.0/include/c++/iostream"</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># <span class="number">2</span> <span class="string">".\\05_fun1.cpp"</span> <span class="number">2</span> </span><br><span class="line"></span><br><span class="line"># <span class="number">2</span> <span class="string">".\\05_fun1.cpp"</span>  <span class="comment">// 将下一行看做第2行 修改了 __FILE__ __LINE__ 内置变量</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="number">1</span> + <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h2><p>编译原理：</p><ul><li><p>词法分析</p></li><li><p>语法分析</p></li><li><p>抽象语法树（AST）</p></li><li><p>语义分析</p></li><li><p>符号表</p><p>符号表用来存储程序中各个变量的相关信息，如类型，作用域，访问控制信息，是一种key-value结构，数据结构可以是哈希表（查找快），也可以是红黑树（省空间）</p><p>符号表处理作用域的方法：一是用一张表，进入作用域就插入元素，离开作用域就删除元素，二是用多张表，构成一个栈，进入作用域就插入一张新表，离开就删除栈顶的表</p><p>符号表处理名字空间的方法：引入标签，标号来区别不同类型</p></li><li><p>汇编代码</p><p>源程序经过了词法分析、语法分析和语义分析，最终生成汇编代码，生成了 <code>*.s*</code> 文件</p></li></ul><p><code>g++ -S main.cpp -o main.s</code></p><h2 id="三、汇编"><a href="#三、汇编" class="headerlink" title="三、汇编"></a>三、汇编</h2><p>将汇编代码转为机器码。</p><p>编译阶段得到的汇编代码并不能直接被计算机识别，计算机的元件（寄存器、cpu等）都是由集成电路实现（与非门、或非门），这些电路组成了复杂的逻辑，每个元件由输入引脚和输出引脚组成，通过输入电流与否来得到输出结果，每个引脚通过0或1来表示是否输入电流，0或1按照一定的规则就组成了机器指令。所以要想计算机理解我们的源代码，汇编指令还得翻译成机器指令，汇编指令只是机器指令的一种助记符（只是给机器指令命了名），它是用来帮助人们更好的理解机器指令而产生的，几乎每一条汇编指令对应一条机器指令。</p><p>汇编阶段通过汇编器把前面得到的汇编代码翻译成目标文件，生成.obj或.o目标文件，该文件中存放的就是与源代码等效的机器指令，每一个.cpp文件都会对应生成一个.obj或.o文件</p><p><code>g++ -C *.cpp -o *.o</code></p><h2 id="四、链接"><a href="#四、链接" class="headerlink" title="四、链接"></a>四、链接</h2><p>目标文件并不能直接执行，还需要经过链接过程，原因是：</p><p>某个.cpp文件调用了另外.cpp文件中的函数或者常量等，它们是相互独立的（每个.cpp对应一个.obj文件），为了解决这类问题，必须要将调用者目标文件与被调用者的目标文件链接起来，最终得到可执行程序（.exe或.elf等）</p><p>链接一般分为静态链接和动态链接</p><p><code>g++ *.cpp -o *.exe</code></p>]]></content>
    
    <summary type="html">
    
      cpp文件编译过程。
    
    </summary>
    
    
      <category term="工具" scheme="https://www.luobuyu.site/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="cpp" scheme="https://www.luobuyu.site/categories/%E5%B7%A5%E5%85%B7/cpp/"/>
    
    
      <category term="cpp" scheme="https://www.luobuyu.site/tags/cpp/"/>
    
      <category term="gdb" scheme="https://www.luobuyu.site/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>3045. 统计前后缀下标对 II</title>
    <link href="https://www.luobuyu.site/2024/count-prefix-suffix-pairsii/"/>
    <id>https://www.luobuyu.site/2024/count-prefix-suffix-pairsii/</id>
    <published>2024-02-19T07:12:15.000Z</published>
    <updated>2024-10-30T14:47:37.460Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="3045-统计前后缀下标对II"><a href="#3045-统计前后缀下标对II" class="headerlink" title="3045.统计前后缀下标对II"></a><a href="https://leetcode.cn/problems/count-prefix-and-suffix-pairs-ii/" target="_blank" rel="noopener">3045.统计前后缀下标对II</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个下标从 <strong>0</strong> 开始的字符串数组 <code>words</code> 。</p><p>定义一个 <strong>布尔</strong> 函数 <code>isPrefixAndSuffix</code> ，它接受两个字符串参数 <code>str1</code> 和 <code>str2</code> ：</p><p>当 $str1$ 同时是 $str2$ 的前缀（<code>prefix</code>）和后缀（<code>suffix</code>）时， $isPrefixAndSuffix(str1, str2)$ 返回 $true$ ，否则返回 $false$ 。</p><p>例如，<code>isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;)</code> 返回 <code>true</code>，因为 <code>&quot;aba&quot;</code> 既是 <code>&quot;ababa&quot;</code> 的前缀，也是 <code>&quot;ababa&quot;</code> 的后缀，但是 <code>isPrefixAndSuffix(&quot;abc&quot;, &quot;abcd&quot;)</code> 返回<code>false</code>。</p><p>以整数形式，返回满足 <code>i &lt; j</code> 且 <code>isPrefixAndSuffix(words[i], words[j])</code> 为 <code>true</code> 的下标对 <code>(i, j)</code> 的 <strong>数量</strong> 。</p><p>数据范围：</p><p> $1\le words.len \le 10^5, \sum words[i].len \le 5\times 10^5$ </p><p> $1\le words[i].len \le 10^5$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>总体思路就是从后往前，将每一个字符串相同的前后缀 $s$ 处理出来，然后存到 $hash$ 表中，然后每次遇到 $words[i]$ ，计数 $mp[words[i]]$ 。</p><p>关键是怎么快速求出一个字符串所有的前后缀相同的字符串。</p><p>两种方法，一种是字符串 hash，而且 $map$ 只需要存 $hash$ 值。</p><p>一种是使用 $Z$ 函数，求出 $Z$ 函数之后，倒着遍历，可以每次往前缀加字符，但是 $map$ 存字符串的话，内存会炸，还是需要hash。</p><p>能否不使用hash？可以直接使用 $trie$ 把字符串前缀存起来，后面在里面查找出现次数。但是需要注意的是，插入 $trie$ 时应该从上次的节点继续插入，不能从头开始，从头开始太慢了。</p><blockquote><p>如何判断一个字符串 $s$ 是另一个字符串 $t$ 的前后缀。</p><ul><li><p>字符串 $hash$ </p></li><li><p>$Z$ 函数， $Z[i] = len - i$ </p></li><li><p>分解成 $pair$ </p><p>将字符串 $s$ 分解为 $[(s[0], s[n - 1]), (s[1], s[n - 2]), \cdots , (s[n - 1],s[0])]$ </p><p>将字符串 $t$ 分解为 $[(t[0], t[n - 1]),(t[1], t[n - 2]), \cdots, (t[n - 1], t[0])]$ </p><p>如果 $s$ 是 $t$ 的前后缀，必须满足 $s$ 的分解序列是 $t$ 分解序列的前缀，可以使用字典树解决。（不能用 $vector$ 了，得用 $unordered\_map$ ）</p></li></ul></blockquote><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">131</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="built_in">pow</span>[maxn];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> hash[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        srand(time(<span class="number">0</span>));</span><br><span class="line">        mod = <span class="number">998244353</span> + rand() % <span class="number">10007</span>;</span><br><span class="line">        base = <span class="number">33</span> + rand() % <span class="number">233</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hashString</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">pow</span>[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pow</span>[i + <span class="number">1</span>] = <span class="built_in">pow</span>[i] * base % mod;</span><br><span class="line">            hash[i + <span class="number">1</span>] = (hash[i] * base + s[i] - <span class="string">'0'</span>) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getHash</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// hash[r + 1] - hash[l + 1 - 1] * pow[r - l + 1];</span></span><br><span class="line">        <span class="keyword">return</span> (hash[r + <span class="number">1</span>] - hash[l] * <span class="built_in">pow</span>[r - l + <span class="number">1</span>] % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">countPrefixSuffixPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = words.size();</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; mp;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> len = words[i].length();</span><br><span class="line">            hashString(words[i]);</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> h = getHash(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">            ans += mp[h];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> h1 = getHash(<span class="number">0</span>, j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> h2 = getHash(len - j, len - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (h1 == h2)</span><br><span class="line">                    mp[h1]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="comment">// 不需要求 Z[0],Z[0] = len</span></span><br><span class="line">    <span class="keyword">int</span> Z[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">zFunction</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Z[<span class="number">0</span>] = len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= r &amp;&amp; Z[i - l] &lt; r - i + <span class="number">1</span>)</span><br><span class="line">                Z[i] = Z[i - l];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Z[i] = max(<span class="number">0</span>, r - i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (i + Z[i] &lt; len &amp;&amp; str[Z[i]] == str[i + Z[i]]) <span class="comment">// 对多余的需要暴力求出</span></span><br><span class="line">                    ++Z[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i + Z[i] - <span class="number">1</span> &gt; r)</span><br><span class="line">                l = i, r = i + Z[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">countPrefixSuffixPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = words.size();</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; mp;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> len = words[i].length();</span><br><span class="line">            zFunction(words[i].c_str(), len);</span><br><span class="line">            ans += mp[words[i]];</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp += words[i][len - <span class="number">1</span> - j];</span><br><span class="line">                <span class="keyword">if</span> (Z[j] == len - j)</span><br><span class="line">                &#123;</span><br><span class="line">                    mp[tmp]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">1331</span>;</span><br><span class="line">    <span class="comment">// 不需要求 Z[0],Z[0] = len</span></span><br><span class="line">    <span class="keyword">int</span> Z[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">zFunction</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Z[<span class="number">0</span>] = len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= r &amp;&amp; Z[i - l] &lt; r - i + <span class="number">1</span>)</span><br><span class="line">                Z[i] = Z[i - l];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Z[i] = max(<span class="number">0</span>, r - i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (i + Z[i] &lt; len &amp;&amp; str[Z[i]] == str[i + Z[i]]) <span class="comment">// 对多余的需要暴力求出</span></span><br><span class="line">                    ++Z[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i + Z[i] - <span class="number">1</span> &gt; r)</span><br><span class="line">                l = i, r = i + Z[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">countPrefixSuffixPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = words.size();</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; mp;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> len = words[i].length();</span><br><span class="line">            zFunction(words[i].c_str(), len);</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = (tmp * base + words[i][j]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += mp[tmp];</span><br><span class="line">            tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = (tmp * base + words[i][len - <span class="number">1</span> - j]) % mod;</span><br><span class="line">                <span class="keyword">if</span> (Z[j] == len - j)</span><br><span class="line">                &#123;</span><br><span class="line">                    mp[tmp]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrieNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">26</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;TrieNode *&gt; next;</span><br><span class="line">    <span class="keyword">bool</span> exist;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TrieNode() : next(M, <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        exist = <span class="literal">false</span>;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TrieNode *root;</span><br><span class="line">    Trie()</span><br><span class="line">    &#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TrieNode *cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ch = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cur-&gt;next[ch])</span><br><span class="line">                cur-&gt;next[ch] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            cur = cur-&gt;next[ch];</span><br><span class="line">            <span class="comment">// cur-&gt;val++;</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;exist = <span class="literal">true</span>;</span><br><span class="line">        cur-&gt;val++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TrieNode *<span class="title">insert</span><span class="params">(<span class="built_in">string</span> &amp;s, TrieNode *cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ch = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cur-&gt;next[ch])</span><br><span class="line">                cur-&gt;next[ch] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            cur = cur-&gt;next[ch];</span><br><span class="line">            <span class="comment">// cur-&gt;val++;</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;exist = <span class="literal">true</span>;</span><br><span class="line">        cur-&gt;val++;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TrieNode *cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ch = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cur-&gt;next[ch])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cur = cur-&gt;next[ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;exist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TrieNode *cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ch = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cur-&gt;next[ch])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cur = cur-&gt;next[ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">1331</span>;</span><br><span class="line">    <span class="comment">// 不需要求 Z[0],Z[0] = len</span></span><br><span class="line">    <span class="keyword">int</span> Z[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">zFunction</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Z[<span class="number">0</span>] = len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= r &amp;&amp; Z[i - l] &lt; r - i + <span class="number">1</span>)</span><br><span class="line">                Z[i] = Z[i - l];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Z[i] = max(<span class="number">0</span>, r - i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (i + Z[i] &lt; len &amp;&amp; str[Z[i]] == str[i + Z[i]]) <span class="comment">// 对多余的需要暴力求出</span></span><br><span class="line">                    ++Z[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i + Z[i] - <span class="number">1</span> &gt; r)</span><br><span class="line">                l = i, r = i + Z[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">countPrefixSuffixPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = words.size();</span><br><span class="line">        Trie trie;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> len = words[i].length();</span><br><span class="line">            zFunction(words[i].c_str(), len);</span><br><span class="line">            ans += trie.query(words[i]);</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            TrieNode *cur = trie.root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.push_back(words[i][len - <span class="number">1</span> - j]);</span><br><span class="line">                <span class="keyword">if</span> (Z[j] == len - j)</span><br><span class="line">                &#123;</span><br><span class="line">                    cur = trie.insert(tmp, cur);</span><br><span class="line">                    tmp.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> optimize_cpp_stdio = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrieNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">26</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, TrieNode *&gt; next;</span><br><span class="line">    <span class="keyword">bool</span> exist;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TrieNode()</span><br><span class="line">    &#123;</span><br><span class="line">        exist = <span class="literal">false</span>;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TrieNode *root;</span><br><span class="line">    Trie()</span><br><span class="line">    &#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TrieNode *cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ch = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cur-&gt;next[ch])</span><br><span class="line">                cur-&gt;next[ch] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            cur = cur-&gt;next[ch];</span><br><span class="line">            <span class="comment">// cur-&gt;val++;</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;exist = <span class="literal">true</span>;</span><br><span class="line">        cur-&gt;val++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TrieNode *<span class="title">insert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;s, TrieNode *cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ch = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cur-&gt;next[ch])</span><br><span class="line">                cur-&gt;next[ch] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            cur = cur-&gt;next[ch];</span><br><span class="line">            <span class="comment">// cur-&gt;val++;</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;exist = <span class="literal">true</span>;</span><br><span class="line">        cur-&gt;val++;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TrieNode *cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ch = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cur-&gt;next[ch])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cur = cur-&gt;next[ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">1331</span>;</span><br><span class="line">    <span class="comment">// 不需要求 Z[0],Z[0] = len</span></span><br><span class="line">    <span class="keyword">int</span> Z[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">zFunction</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Z[<span class="number">0</span>] = len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= r &amp;&amp; Z[i - l] &lt; r - i + <span class="number">1</span>)</span><br><span class="line">                Z[i] = Z[i - l];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Z[i] = max(<span class="number">0</span>, r - i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (i + Z[i] &lt; len &amp;&amp; str[Z[i]] == str[i + Z[i]]) <span class="comment">// 对多余的需要暴力求出</span></span><br><span class="line">                    ++Z[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i + Z[i] - <span class="number">1</span> &gt; r)</span><br><span class="line">                l = i, r = i + Z[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPairHash</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a - <span class="string">'a'</span>) &lt;&lt; <span class="number">5</span> | (b - <span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">countPrefixSuffixPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = words.size();</span><br><span class="line">        Trie trie;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> len = words[i].length();</span><br><span class="line">            zFunction(words[i].c_str(), len);</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.emplace_back(getPairHash(words[i][j], words[i][len - <span class="number">1</span> - j]));</span><br><span class="line">            &#125;</span><br><span class="line">            ans += trie.query(tmp);</span><br><span class="line">            TrieNode *cur = trie.root;</span><br><span class="line">            tmp.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.emplace_back(getPairHash(words[i][len - <span class="number">1</span> - j], words[i][j]));</span><br><span class="line">                <span class="keyword">if</span> (Z[j] == len - j)</span><br><span class="line">                &#123;</span><br><span class="line">                    cur = trie.insert(tmp, cur);</span><br><span class="line">                    tmp.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      可以使用字符串hash或者z函数快速求出字符串的相同前后缀。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="ds" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/ds/"/>
    
    
      <category term="字符串hash" scheme="https://www.luobuyu.site/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2hash/"/>
    
      <category term="z函数" scheme="https://www.luobuyu.site/tags/z%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>3041. 修改数组后最大化数组中的连续元素数目</title>
    <link href="https://www.luobuyu.site/2024/max-consecutive-elements-modi/"/>
    <id>https://www.luobuyu.site/2024/max-consecutive-elements-modi/</id>
    <published>2024-02-19T04:25:15.000Z</published>
    <updated>2024-10-30T14:47:37.460Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='https://api.injahow.cn/meting/?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="3041-修改数组后最大化数组中的连续元素数目"><a href="#3041-修改数组后最大化数组中的连续元素数目" class="headerlink" title="3041.修改数组后最大化数组中的连续元素数目"></a><a href="https://leetcode.cn/problems/maximize-consecutive-elements-in-an-array-after-modification/" target="_blank" rel="noopener">3041.修改数组后最大化数组中的连续元素数目</a></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个下标从 <strong>0</strong> 开始只包含 <strong>正</strong> 整数的数组 <code>nums</code> 。</p><p>一开始，你可以将数组中 <strong>任意数量</strong> 元素增加 <strong>至多</strong> <code>1</code> 。</p><p>修改后，你可以从最终数组中选择 <strong>一个或者更多</strong> 元素，并确保这些元素升序排序后是 <strong>连续</strong> 的。比方说，<code>[3, 4, 5]</code> 是连续的，但是 <code>[3, 4, 6]</code> 和 <code>[1, 1, 2, 3]</code> 不是连续的。</p><p>请你返回 <strong>最多</strong> 可以选出的元素数目。</p><p>数据范围：</p><p> $1\le nums.len \le 10^5, 1\le nums[i] \le 10^6$ </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>首先先排序，然后直接使用 $dp$ ，针对每一个数组选择修改与否。如果存在 $dp[x]$ ，则可以选择修改当前 $x$ ， $dp[x +1] = dp[x] + 1$ ，否则的话可以考虑接到 $dp[x - 1]$ 后面， $dp[x] = dp[x - 1] + 1$ 。如果使用 $count$ 判断的话需要注意初始状态。</p><p>也可以不使用 $count$ ，直接使用 $dp[x +1] = dp[x] + 1, dp[x] = dp[x - 1] + 1$ 。因为如果 $x$ 不存在， $mp[x] = 0$ 。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSelectedElements</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (mp.count(x))</span><br><span class="line">                mp[x + <span class="number">1</span>] = max(mp[x + <span class="number">1</span>], mp[x] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> mp[x] = mp[x + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (mp.count(x - <span class="number">1</span>))</span><br><span class="line">                mp[x] = max(mp[x], mp[x - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> mp[x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[key, val] : mp)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = max(ans, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      dp。
    
    </summary>
    
    
      <category term="题解" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LeetCode" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/"/>
    
      <category term="dp" scheme="https://www.luobuyu.site/categories/%E9%A2%98%E8%A7%A3/LeetCode/dp/"/>
    
    
      <category term="dp" scheme="https://www.luobuyu.site/tags/dp/"/>
    
      <category term="排序" scheme="https://www.luobuyu.site/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
